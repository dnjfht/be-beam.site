name: CI and Sync Fork

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch: # ‚úÖ Ïù¥ Ï§ÑÏù¥ ÏûàÏñ¥Ïïº "Run workflow" Î≤ÑÌäºÏù¥ ÎúπÎãàÎã§

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install pnpm globally & ensure in PATH
        run: |
          npm install -g pnpm
          echo "$(npm bin -g)" >> $GITHUB_PATH
          pnpm -v

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm lint

      - name: Prettier check (non-blocking)
        run: pnpm format:check || echo "Prettier issues (not blocking)"

      - name: Test
        run: pnpm test

  sync-to-fork:
    needs: ci
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ï†ÑÏ≤¥ ÌûàÏä§ÌÜ†Î¶¨ Í∞ÄÏ†∏Ïò§Í∏∞

      - name: Set up Git user
        run: |
          git config --global user.name "dnjfht"
          git config --global user.email "117057638+dnjfht@users.noreply.github.com"

      - name: Detailed debugging and push
        env:
          TOKEN: ${{ secrets.PERSONAL_FORK_TOKEN }}
        run: |
          echo "=== 1. Environment check ==="
          echo "Current branch: $(git branch --show-current)"
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Repository: ${{ github.repository }}"
          echo "Token exists: $(if [ -n "${TOKEN}" ]; then echo "YES"; else echo "NO"; fi)"

          echo "=== 2. Token validation ==="
          user_response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -H "Authorization: token ${TOKEN}" https://api.github.com/user)
          echo "User API response:"
          echo "$user_response"

          echo "=== 3. Target repository access check ==="
          repo_response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -H "Authorization: token ${TOKEN}" https://api.github.com/repos/dnjfht/be-beam.site)
          echo "Repository API response:"
          echo "$repo_response"

          echo "=== 4. Repository permissions check ==="
          permissions=$(curl -s -H "Authorization: token ${TOKEN}" https://api.github.com/repos/dnjfht/be-beam.site | jq '.permissions // "No permissions field"')
          echo "Permissions: $permissions"

          echo "=== 5. Current git status ==="
          git status --porcelain
          git log --oneline -3

          echo "=== 6. Test different authentication methods ==="

          # Clean up any existing remotes
          git remote remove origin || true
          git remote remove personal-fork || true

          # Method 1: x-access-token
          echo "Testing Method 1: x-access-token"
          git remote add test-origin https://x-access-token:${TOKEN}@github.com/dnjfht/be-beam.site.git
          if git ls-remote test-origin main; then
            echo "‚úÖ Method 1 (x-access-token) - Remote access successful"
            WORKING_METHOD="x-access-token"
            WORKING_URL="https://x-access-token:${TOKEN}@github.com/dnjfht/be-beam.site.git"
          else
            echo "‚ùå Method 1 (x-access-token) - Remote access failed"
          fi
          git remote remove test-origin

          # Method 2: username:token
          echo "Testing Method 2: username:token"
          git remote add test-origin https://dnjfht:${TOKEN}@github.com/dnjfht/be-beam.site.git
          if git ls-remote test-origin main; then
            echo "‚úÖ Method 2 (username:token) - Remote access successful"
            WORKING_METHOD="username:token"
            WORKING_URL="https://dnjfht:${TOKEN}@github.com/dnjfht/be-beam.site.git"
          else
            echo "‚ùå Method 2 (username:token) - Remote access failed"
          fi
          git remote remove test-origin

          # Method 3: token only
          echo "Testing Method 3: token only"
          git remote add test-origin https://${TOKEN}@github.com/dnjfht/be-beam.site.git
          if git ls-remote test-origin main; then
            echo "‚úÖ Method 3 (token only) - Remote access successful"
            WORKING_METHOD="token-only"
            WORKING_URL="https://${TOKEN}@github.com/dnjfht/be-beam.site.git"
          else
            echo "‚ùå Method 3 (token only) - Remote access failed"
          fi
          git remote remove test-origin

          echo "=== 7. Attempting push with working method ==="

          if [ -n "$WORKING_URL" ]; then
            echo "Using working method: $WORKING_METHOD"
            echo "URL: ${WORKING_URL%:*}:***@github.com/dnjfht/be-beam.site.git"  # ÌÜ†ÌÅ∞ ÎßàÏä§ÌÇπ
            
            git remote add origin "$WORKING_URL"
            
            # ÌòÑÏû¨ ÏÉÅÌÉú ÌôïÏù∏
            echo "Current branch and remote tracking:"
            git branch -vv
            
            # Push ÏãúÎèÑ
            echo "Attempting push..."
            if git push -f origin main; then
              echo "‚úÖ Push successful!"
              PUSH_SUCCESS=true
            else
              echo "‚ùå Primary push failed, trying alternatives..."
              PUSH_SUCCESS=false
              
              # ÎåÄÏïà 1: ÌäπÏ†ï Ïª§Î∞ã push
              echo "Alternative 1: Push specific commit"
              if git push -f origin HEAD:main; then
                echo "‚úÖ Alternative 1 successful!"
                PUSH_SUCCESS=true
              else
                echo "‚ùå Alternative 1 failed"
              fi
              
              # ÎåÄÏïà 2: Î∏åÎûúÏπò Ïù¥Î¶Ñ Î™ÖÏãúÏ†Å ÏßÄÏ†ï (Alternative 1Ïù¥ Ïã§Ìå®Ìïú Í≤ΩÏö∞ÏóêÎßå)
              if [ "$PUSH_SUCCESS" = "false" ]; then
                echo "Alternative 2: Explicit branch specification"
                if git push -f origin main:main; then
                  echo "‚úÖ Alternative 2 successful!"
                  PUSH_SUCCESS=true
                else
                  echo "‚ùå Alternative 2 failed"
                fi
              fi
            fi
            
            # ÏµúÏ¢Ö push Í≤∞Í≥º ÌôïÏù∏
            if [ "$PUSH_SUCCESS" = "true" ]; then
              echo "üéâ Push operation completed successfully!"
            else
              echo "üí• All push attempts failed!"
              exit 1
            fi
          else
            echo "‚ùå No working authentication method found!"
            echo "All authentication methods failed. Please check:"
            echo "1. Token permissions (repo scope)"
            echo "2. Repository existence and access"
            echo "3. Organization third-party access policies"
            exit 1
          fi

          echo "=== 8. Final verification ==="
          if git ls-remote origin main; then
            echo "‚úÖ Final verification: Remote repository accessible"
            
            # ÏõêÍ≤© Ï†ÄÏû•ÏÜåÏùò ÏµúÏã† Ïª§Î∞ãÍ≥º ÌòÑÏû¨ Ïª§Î∞ã ÎπÑÍµê
            REMOTE_COMMIT=$(git ls-remote origin main | cut -f1)
            LOCAL_COMMIT=$(git rev-parse HEAD)
            
            echo "Local commit:  $LOCAL_COMMIT"
            echo "Remote commit: $REMOTE_COMMIT"
            
            if [ "$LOCAL_COMMIT" = "$REMOTE_COMMIT" ]; then
              echo "‚úÖ Commits match - Push was successful!"
            else
              echo "‚ùå Commits don't match - Push might have failed"
            fi
          else
            echo "‚ùå Final verification: Remote repository not accessible"
          fi
